name: Laravel CI/CD Pipeline

# Déclenchement : seulement sur la branche main
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Variables d'environnement globales
env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '20'
  MYSQL_VERSION: '8.0'

jobs:
  # ========================================
  # JOB 1: Tests et Qualité du Code
  # ========================================
  code-quality-and-tests:
    name: 🧪 Tests & Code Quality
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      # 1. Checkout du code
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      # 2. Setup PHP avec extensions
      - name: 🐘 Setup PHP ${{ env.PHP_VERSION }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, dom, fileinfo, mysql, gd, zip, bcmath
          coverage: xdebug
          tools: composer:v2

      # 3. Cache des dépendances Composer
      - name: 📦 Cache Composer Dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      # 4. Installation des dépendances PHP
      - name: 🔧 Install Composer Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader

      # 5. Copie du fichier .env
      - name: 📝 Copy .env.example to .env
        run: cp .env.example .env

      # 6. Génération de la clé d'application
      - name: 🔑 Generate Application Key
        run: php artisan key:generate

      # 7. Configuration de la base de données pour les tests
      - name: 🗄️ Configure Database
        run: |
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=laravel_test" >> .env
          echo "DB_USERNAME=root" >> .env
          echo "DB_PASSWORD=password" >> .env

      # 8. Exécution des migrations
      - name: 🚀 Run Migrations
        run: php artisan migrate --force

      # 9. Seed de la base de données (optionnel)
      - name: 🌱 Seed Database
        run: php artisan db:seed --force
        continue-on-error: true

      # 10. Exécution des tests PHPUnit avec couverture
      - name: 🧪 Run PHPUnit Tests
        run: php artisan test --coverage --min=70
        continue-on-error: true

      # 11. PHP Code Sniffer (PSR-12)
      - name: 🔍 Check Code Style (PHPCS)
        run: |
          composer require --dev squizlabs/php_codesniffer
          vendor/bin/phpcs --standard=PSR12 app/
        continue-on-error: true

      # 12. PHP Stan - Analyse statique
      - name: 🔬 Static Analysis (PHPStan)
        run: |
          composer require --dev phpstan/phpstan
          vendor/bin/phpstan analyse app --level=5
        continue-on-error: true

      # 13. Vérification de sécurité des dépendances
      - name: 🔒 Security Audit
        run: composer audit
        continue-on-error: true

      # 14. Upload des rapports de couverture
      - name: 📊 Upload Coverage Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  # ========================================
  # JOB 2: Build Frontend Assets
  # ========================================
  build-assets:
    name: 🎨 Build Frontend Assets
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install NPM Dependencies
        run: npm ci

      - name: 🏗️ Build Assets with Vite
        run: npm run build

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: compiled-assets
          path: public/build/
          retention-days: 7

  # ========================================
  # JOB 3: Docker Build & Push
  # ========================================
  docker-build:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [code-quality-and-tests, build-assets]
    if: github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏷️ Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: sofiennemrabet321/laravel-app
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=sofiennemrabet321/laravel-app:buildcache
          cache-to: type=registry,ref=sofiennemrabet321/laravel-app:buildcache,mode=max
